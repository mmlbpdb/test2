name: dotnet package

on: [push]

jobs:
  build:

    runs-on: windows-latest
    #strategy:
    #  matrix:
    #    dotnet-version: ['3.0', '3.1.x', '5.0.x' ]

    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v3
      #- name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      #  uses: actions/setup-dotnet@v3
      #  with:
      #    dotnet-version: ${{ matrix.dotnet-version }}
      # - name: Install dependencies
      #   run: dotnet restore
      # - name: Build
      #   run: dotnet build --configuration Release --no-restore
      # - name: Test
      #   run: dotnet test --no-restore --verbosity normal
      - name: Prepare Building
        uses: microsoft/setup-msbuild@v1 
      - name: Restore NuGet
        run: nuget restore
      - name: Building     
        run: msbuild.exe AutomationScript.sln /clp:ErrorsOnly /fileLogger /flp:errorsonly /nologo /t:Clean,Restore,Build /p:Configuration=Release /p:ReferencePath="${{ github.workspace }}\Dlls" # /verbosity:minimal
      - name: Scan Test Projects
        run: echo "todo"  
      - name: Prepare Unit Tests
        uses: darenm/Setup-VSTest@v1
      - name: Unit Tests
        run: vstest.console.exe **\bin\**\*.UnitTests.dll **\bin\**\*.Tests.dll **\bin\**\*Tests.dll /logger:trx # https://learn.microsoft.com/en-us/visualstudio/test/vstest-console-options?view=vs-2022
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install dotnet-sonarscanner --tool-path .\.sonar\scanner
      # dotnet tool install --global dotnet-sonarscanner
      #- name: Install Dotnet coverage
      #  run: dotnet tool install --global dotnet-coverage
      #- name: Install Dotnet coverage
      #  run: dotnet tool install --global JetBrains.dotCover.GlobalTool
      - name: Install OpenCover
        run: nuget install OpenCover -OutputDirectory ".\.dotcover"
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
            .\.sonar\scanner\dotnet-sonarscanner begin /k:"mmlbpdb_test2" /o:"testorg561" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=coverage.xml
            msbuild.exe AutomationScript.sln /clp:ErrorsOnly /fileLogger /flp:errorsonly /nologo /t:Clean,Restore,Build /p:Configuration=Release /p:ReferencePath="${{ github.workspace }}\Dlls"
            & .\.dotcover\OpenCover.4.7.1221\tools\OpenCover.Console.exe -target:"vstest.console.exe" -targetargs:"**\bin\**\*Tests.dll --no-build" -returntargetcode -output:coverage.xml -register:user
            .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        #  .\.sonar\scanner\dotnet-sonarscanner begin /k:"mmlbpdb_test2" /o:"testorg561" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        #  msbuild.exe AutomationScript.sln /clp:ErrorsOnly /fileLogger /flp:errorsonly /nologo /t:Clean,Restore,Build /p:Configuration=Release /p:ReferencePath="${{ github.workspace }}\Dlls"
        #  dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
        #  .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        # Windows .NET 
        # dotnet sonarscanner begin /k:"mmlbpdb_testing" /o:"testorg561" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.log.level=Debug
        # dotnet build --configuration Release
        # dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
        # dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        # Ubuntu
        # dotnet sonarscanner begin /k:"mmlbpdb_testing" /o:"testorg561" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html /d:sonar.log.level=Debug
        # dotnet build --configuration Release
        # dotnet dotcover test --dcReportType=HTML
        # dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      #- name: readDir2
      #  run: ls -lR 
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          # Artifact name
          name: buildresult #.zip will be added automatically
          path: coverage.xml
          #path: /home/runner/work/testing/testing/ClassLibrary/bin/Release/net462/*.*